name: Publish containers

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to checkout to"
        required: false
        default: "main"
      container_tag:
        description: "Container tag"
        required: false
        default: "latest"
      update_fluence:
        description: Whether to update fluence.json
        required: false
        default: "false"
      version:
        description: 'Fluence version'
        required: false
      url:
        description: 'Fluence binary URL'
        required: false
      sha256:
        description: 'Fluence binary SHA256 hash'
        required: false

env:
  RUN_NUMBER: ${{ github.run_number }}
  TAG: ${{ github.event.inputs.container_tag || 'latest' }}
  DOCKER_BUILDKIT: 1

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      build_date: "${{ steps.build_date.outputs.date }}"

    steps:
      - name: Set build date
        id: build_date
        run: echo "::set-output name=date::$(date '+%Y-%m-%dT%H:%M:%S%:z')"

  build:
    name: Build and publish ${{ matrix.package }}
    runs-on: ubuntu-latest

    needs: prepare

    env:
      UPDATE_FLUENCE: ${{ github.event.inputs.update_fluence == 'true' || github.event.inputs.container_tag == '' }}

    strategy:
      matrix:
        package:
          - minimal
          - ipfs
          - rich

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Update Fluence in fluence.json to ${{ github.event.inputs.version }}
        if: env.UPDATE_FLUENCE != 'false'
        run: |
          cat <<FLUENCE > fluence/fluence.json
          {
            "version": "${{ github.event.inputs.version }}",
            "url": "${{ github.event.inputs.url }}",
            "sha256": "${{ github.event.inputs.sha256 }}"
          }
          FLUENCE

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.package }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          target: ${{ matrix.package }}
          tags: |
            fluencelabs/fluence:${{ matrix.package }}_${{ env.TAG }}
            fluencelabs/fluence:${{ matrix.package }}_${{ env.TAG }}_${{ env.RUN_NUMBER }}
          build-args: |
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ needs.prepare.outputs.build_date }}
            RUN_NUMBER=${{ env.RUN_NUMBER }}
            TAG=${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    needs:
      - prepare
      - build

    steps:
      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/slack/dockerhub webhook | INCOMING_WEBHOOK_URL

      - name: Send message with published tags to Slack
        uses: tokorom/action-slack-incoming-webhook@v1.1.4
        with:
          text: New container tags published
          attachments: |
            [
              {
                "color": "good",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "minimal",
                    "value": "- fluencelabs/fluence:minimal_${{ env.TAG }}\n- fluencelabs/fluence:minimal_${{ env.TAG }}_${{ env.RUN_NUMBER }}"
                  },
                  {
                    "title": "ipfs",
                    "value": "- fluencelabs/fluence:ipfs_${{ env.TAG }}\n- fluencelabs/fluence:ipfs_${{ env.TAG }}_${{ env.RUN_NUMBER }}"
                  },
                  {
                    "title": "rich",
                    "value": "- fluencelabs/fluence:rich_${{ env.TAG }}\n- fluencelabs/fluence:rich_${{ env.TAG }}_${{ env.RUN_NUMBER }}"
                  }
                ]
              }
            ]
