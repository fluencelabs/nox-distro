name: "release-please"

on:
  push:
    branches:
      - "main"

env:
  DOCKER_BUILDKIT: 1
  FORCE_COLOR: 1

jobs:
  release-please:
    runs-on: ubuntu-latest

    outputs:
      release-created: ${{ steps.release.outputs['release_created'] }}
      tag-name: ${{ steps.release.outputs['tag_name'] }}
      version: ${{ steps.release.outputs['version'] }}
      pr: ${{ steps.release.outputs['pr'] }}

    steps:
      - name: Run release-please
        id: release
        uses: google-github-actions/release-please-action@v3
        with:
          token: ${{ secrets.FLUENCEBOT_RELEASE_PLEASE_PAT }}
          command: manifest
          config-file: .github/release-please/config.json
          manifest-file: .github/release-please/manifest.json

      - name: Show output from release-please
        if: steps.release.outputs.releases_created
        env:
          RELEASE_PLEASE_OUTPUT: ${{ toJSON(steps.release.outputs) }}
        run: echo "${RELEASE_PLEASE_OUTPUT}" | jq

  publish:
    if: needs.release-please.outputs.release-created
    name: "Build and push ${{ matrix.package }}"
    runs-on: ubuntu-latest
    needs: release-please

    strategy:
      matrix:
        package:
          - minimal
          - ipfs
          - rich

    # for authentication to Vault with vault-action
    # https://github.com/hashicorp/vault-action#jwt-with-github-oidc-tokens
    permissions:
      contents: read
      id-token: write

    env:
      RELEASE_VERSION: ${{ needs.release-please.outputs.version }}

    steps:
      - name: Set build date
        run: echo "BUILD_DATE=$(date '+%Y-%m-%dT%H:%M:%S%:z')" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/hub.docker.com/fluencebot username | DOCKER_USERNAME ;
            kv/hub.docker.com/fluencebot password | DOCKER_PASSWORD

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.package }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          target: ${{ matrix.package }}
          tags: |
            fluencelabs/rust-peer:${{ matrix.package }}
            fluencelabs/rust-peer:${{ matrix.package }}_${{ env.RELEASE_VERSION }}
            fluencelabs/fluence:${{ matrix.package }}
            fluencelabs/fluence:${{ matrix.package }}_${{ env.RELEASE_VERSION }}
          labels: |
            org.opencontainers.image.version=${{ env.RELEASE_VERSION }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ needs.release-please.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push ${{ matrix.package }}
        if: matrix.package == 'ipfs'
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          target: ${{ matrix.package }}
          tags: |
            fluencelabs/rust-peer:latest
            fluencelabs/rust-peer:${{ env.RELEASE_VERSION }}
            fluencelabs/fluence:latest
            fluencelabs/fluence:${{ env.RELEASE_VERSION }}
          labels: |
            org.opencontainers.image.version=${{ env.RELEASE_VERSION }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ needs.release-please.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker Hub Description
        if: matrix.package == 'ipfs'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
          repository: fluencelabs/rust-peer

  update-release:
    name: "Update release"
    runs-on: ubuntu-latest

    needs:
      - release-please
      - publish

    env:
      RELEASE_VERSION: ${{ needs.release-please.outputs.version }}

    steps:
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-please.outputs.tag-name }}
          append_body: true
          body: |

            ## Docker tags

            ### ipfs
            Contains Fluence rust-peer and builtin IPFS deaemon.

            fluencelabs/rust-peer:latest
            fluencelabs/rust-peer:${{ env.RELEASE_VERSION }}
            fluencelabs/rust-peer:ipfs
            fluencelabs/rust-peer:ipfs_${{ env.RELEASE_VERSION }}

            ## minimal
            Contains Fluence rust-peer only.

            fluencelabs/rust-peer:minimal
            fluencelabs/rust-peer:minimal_${{ env.RELEASE_VERSION }}

            ## rich
            Contains Fluence rust-peer, IPFS, ceramic cli, bitcoin cli and geth cli.

            fluencelabs/rust-peer:rich
            fluencelabs/rust-peer:rich_${{ env.RELEASE_VERSION }}

  slack:
    if: always()
    name: "Notify"
    runs-on: ubuntu-latest

    needs:
      - release-please
      - publish
      - update-release

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: lwhiteley/dependent-jobs-result-check@v1
        id: status
        with:
          statuses: failure
          dependencies: ${{ toJSON(needs) }}

      - name: Log output
        run: |
          echo "statuses:" "${{ steps.status.outputs.statuses }}"
          echo "jobs:" "${{ steps.status.outputs.jobs }}"
          echo "found any?:" "${{ steps.status.outputs.found }}"

      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          exportToken: false
          secrets: |
            kv/slack/release-please webhook | SLACK_WEBHOOK_URL

      - uses: ravsamhq/notify-slack-action@v2
        if: steps.status.outputs.found == 'true'
        with:
          status: "failure"
          notification_title: "*{workflow}* has {status_message}"
          message_format: "${{ steps.status.outputs.jobs }} {status_message} in <{repo_url}|{repo}>"
          footer: "<{run_url}>"
